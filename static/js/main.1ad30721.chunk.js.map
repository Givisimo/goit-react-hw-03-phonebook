{"version":3,"sources":["ContactList/ContactList.jsx","utils/getFilteredContacts.js","ContactForm/ContactForm.jsx","Filter/Filter.jsx","Phonebook/Phonebook.jsx","App/App.jsx","index.js"],"names":["ContactList","contacts","onDelete","map","contact","key","id","name","number","type","onClick","getFilteredContacts","allContacts","filter","item","toUpperCase","includes","ContactForm","state","inputIds","nameId","uuid","numberId","handleChange","e","setState","target","value","handleClick","newContact","isNaN","alert","props","onSaveContact","reset","this","htmlFor","onChange","Component","Filter","searchId","handleFilter","Phonebook","contactsList","currentTarget","saveContact","find","deleteContact","contactId","contactsFromStorage","JSON","parse","localStorage","getItem","setItem","stringify","filteredContact","App","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1ad30721.chunk.js","sourcesContent":["import React from 'react';\nimport T from 'prop-types';\n\nconst ContactList = ({ contacts, onDelete }) => (\n  <ul>\n    {contacts.map(contact => (\n      <li key={contact.id}>\n        {contact.name}:{contact.number}\n        <button type=\"button\" onClick={() => onDelete(contact.id)}>\n          Delete\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nContactList.propTypes = {\n  contacts: T.arrayOf(\n    T.shape({\n      id: T.string.isRequired,\n      name: T.string.isRequired,\n      number: T.string.isRequired,\n    }),\n  ).isRequired,\n  onDelete: T.func.isRequired,\n};\n\nexport default ContactList;\n","const getFilteredContacts = (allContacts, filter) => {\n  return allContacts.filter(item =>\n    item.name.toUpperCase().includes(filter.toUpperCase()),\n  );\n};\n\nexport default getFilteredContacts;\n","import React, { Component } from 'react';\nimport uuid from 'uuid/v1';\nimport T from 'prop-types';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  inputIds = {\n    nameId: uuid(),\n    numberId: uuid(),\n  };\n\n  handleChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  handleClick = () => {\n    const newContact = {\n      id: uuid(),\n      name: this.state.name,\n      number: this.state.number,\n    };\n    if (!this.state.name || !this.state.number) {\n      alert('Name and number is required!');\n      return;\n    }\n    // eslint-disable-next-line\n    if (isNaN(this.state.number)) {\n      alert('Invalid number');\n      return;\n    }\n    this.props.onSaveContact({ ...newContact });\n\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  render() {\n    const { name, number } = this.state;\n    const { nameId, numberId } = this.inputIds;\n    return (\n      <form>\n        <label htmlFor={nameId}>\n          <h2>Name</h2>\n          <input\n            type=\"text\"\n            onChange={this.handleChange}\n            name=\"name\"\n            value={name}\n            id={nameId}\n          />\n        </label>\n        <label htmlFor={numberId}>\n          <h2>Number</h2>\n          <input\n            type=\"text\"\n            onChange={this.handleChange}\n            name=\"number\"\n            value={number}\n            id={numberId}\n          />\n        </label>\n\n        <p>\n          <button type=\"button\" onClick={this.handleClick}>\n            Add contact\n          </button>\n        </p>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  onSaveContact: T.func.isRequired,\n};\n\nexport default ContactForm;\n","import React from 'react';\nimport T from 'prop-types';\n\nconst Filter = ({ searchId, handleFilter, filter }) => (\n  <>\n    <p>Find contact by name</p>\n    <label htmlFor={searchId}>\n      <input\n        type=\"text\"\n        onChange={handleFilter}\n        name=\"filter\"\n        value={filter}\n        id={searchId}\n      />\n    </label>\n  </>\n);\n\nFilter.propTypes = {\n  searchId: T.string.isRequired,\n  handleFilter: T.func.isRequired,\n  filter: T.string.isRequired,\n};\n\nexport default Filter;\n","import React, { Component } from 'react';\nimport uuid from 'uuid/v1';\nimport ContactList from '../ContactList/ContactList';\nimport getFilteredContacts from '../utils/getFilteredContacts';\nimport ContactForm from '../ContactForm/ContactForm';\nimport Filter from '../Filter/Filter';\nimport contactsList from '../data/contacts';\n\nclass Phonebook extends Component {\n  state = {\n    contacts: [...contactsList],\n    filter: '',\n  };\n\n  inputIds = {\n    nameId: uuid(),\n    numberId: uuid(),\n    searchId: uuid(),\n  };\n\n  componentDidMount() {\n    const contactsFromStorage = JSON.parse(localStorage.getItem('contacts'));\n    if (!contactsFromStorage) {\n      return;\n    }\n    this.setState({ contacts: [...contactsFromStorage] });\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n  }\n\n  handleFilter = e => {\n    this.setState({\n      filter: e.currentTarget.value,\n    });\n  };\n\n  saveContact = contact => {\n    if (this.state.contacts.find(item => item.name === contact.name)) {\n      // eslint-disable-next-line no-alert\n      alert(`${contact.name} is already in contacts`);\n      return;\n    }\n    this.setState(state => ({ contacts: [...state.contacts, contact] }));\n  };\n\n  deleteContact = contactId => {\n    this.setState(state => ({\n      contacts: state.contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n\n  render() {\n    const { contacts, filter } = this.state;\n    const { searchId } = this.inputIds;\n\n    const filteredContact = getFilteredContacts(contacts, filter);\n\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm onSaveContact={this.saveContact} />\n        <h2>Contacts</h2>\n        <Filter\n          searchId={searchId}\n          handleFilter={this.handleFilter}\n          filter={filter}\n        />\n        <ContactList contacts={filteredContact} onDelete={this.deleteContact} />\n      </div>\n    );\n  }\n}\n\nexport default Phonebook;\n","import React from 'react';\nimport './App.css';\nimport Phonebook from '../Phonebook/Phonebook';\n\nconst App = () => (\n  <div className=\"App\">\n    <Phonebook />\n  </div>\n);\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}